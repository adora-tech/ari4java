
package ch.loway.oss.ari4java.codegen.models;

import ch.loway.oss.ari4java.codegen.gen.JavaGen;
import ch.loway.oss.ari4java.codegen.gen.JavaInterface;
import ch.loway.oss.ari4java.codegen.gen.JavaPkgInfo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

/**
 * $Id$
 *
 * @author lenz
 */
public class Model extends JavaPkgInfo {

    public String description = "";
    public String extendsModel = "";
    public Set<String> subTypes;
    public String comesFromFile = "";
    public List<String> implementsInterfaces = new ArrayList<>();
    public List<String> imports = new ArrayList<>();
    public List<ModelField> fields = new ArrayList<>();
    public String additionalPreambleText = "";

    public Model() {
        imports.add("java.util.Date");
        imports.add("java.util.List");
        imports.add("java.util.Map");
        imports.add(JavaPkgInfo.GENERATED_PKG_NAME + ".models.Module");
        imports.add(JavaPkgInfo.GENERATED_PKG_NAME + ".models.*");
        imports.add("com.fasterxml.jackson.databind.annotation.JsonDeserialize");
        imports.add("com.fasterxml.jackson.annotation.JsonIgnore");
    }

    @Override
    public String toString() {
        Collections.sort(imports);
        Collections.sort(fields);
        Collections.sort(implementsInterfaces);
        JavaInterface ji = getBaseInterface();
        StringBuilder sb = new StringBuilder();
        JavaGen.importClasses(sb, getModelPackage(), imports);
        JavaGen.addBanner(sb, description + "\n\n"
                + "Defined in file: " + comesFromFile + "\n"
                + "Generated by: " + this.getClass().getSimpleName()
        );
        sb.append(additionalPreambleText);
        sb.append("public class ").append(getImplName());
        // concrete implementation for the model to be extended
        if (extendsModel.length() > 0) {
            JavaPkgInfo jpi = new JavaPkgInfo();
            jpi.setPackageInfo(extendsModel, apiVersion);
            sb.append(" extends ").append(jpi.getImplName());
        }
        sb.append(" implements ");
        for (String inf : implementsInterfaces) {
            sb.append(inf).append(", ");
        }
        sb.append(getInterfaceName()).append(", ");
        sb.append("java.io.Serializable {\n");
        sb.append("  private static final long serialVersionUID = 1L;\n");
        boolean hasId = false;
        boolean hasName = false;
        for (ModelField mf : fields) {
            ji.removeSignature(mf.getSignatureGet());
            ji.removeSignature(mf.getSignatureSet());
            sb.append(mf.toString());
            if ("id".equalsIgnoreCase(mf.field)) {
                hasId = true;
            } else if ("name".equalsIgnoreCase(mf.field)) {
                hasName = true;
            }
        }
        sb.append(ji.getCodeToImplementMissingSignatures(true));
        if (hasId || hasName) {
            sb.append("  public String toString() {\n    return ");
            sb.append("\"").append(getInterfaceName()).append("[");
            if (hasId) {
                sb.append("id=\" + id + \"");
            }
            if (hasId && hasName) {
                sb.append(", ");
            }
            if (hasName) {
                sb.append("name=\" + name + \"");
            }
            sb.append("]\"");
            sb.append(";\n  }\n\n");
        }
        sb.append("}\n");
        return sb.toString();
    }

    public void registerInterfaces(JavaInterface j, String apiVersion) {
        for (ModelField mf : fields) {
            // getter
            String signature = mf.getSignatureGet();
            String declaration = mf.getDeclarationGet();
            String comment = mf.comment + "\n@return " + mf.typeInterface;
            j.iKnow(signature, declaration, comment, apiVersion);
            // setter
            signature = mf.getSignatureSet();
            declaration = mf.getDeclarationSet();
            comment = "@param val " + (mf.comment.trim().isEmpty() ? "the value" : mf.comment);
            j.iKnow(signature, declaration, comment, apiVersion);
        }
    }

}
