
package ch.loway.oss.ari4java.codegen.models;

import ch.loway.oss.ari4java.codegen.gen.JavaGen;
import ch.loway.oss.ari4java.codegen.gen.JavaInterface;
import ch.loway.oss.ari4java.codegen.gen.JavaPkgInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * @author lenz
 */
public class Apis extends JavaPkgInfo {

    public List<Action> actions = new ArrayList<>();

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        JavaInterface ji = getBaseInterface();
        JavaGen.importClasses(sb, getActionsPackage(), Arrays.asList("java.util.Date",
                "java.util.List",
                "java.util.Map",
                "java.util.ArrayList",
                "java.net.URLEncoder",
                JavaPkgInfo.BASE_PKG_NAME + ".ARI",
                JavaPkgInfo.BASE_PKG_NAME + ".tools.*",
                JavaPkgInfo.GENERATED_PKG_NAME + ".actions.*",
                JavaPkgInfo.GENERATED_PKG_NAME + ".actions.requests.*",
                JavaPkgInfo.GENERATED_PKG_NAME + ".models.Module",
                JavaPkgInfo.GENERATED_PKG_NAME + ".models.*",
                getActionsPackage() + ".requests.*",
                getModelPackage() + ".*",
                "com.fasterxml.jackson.core.type.TypeReference"));
        JavaGen.addBanner(sb, "\n"
                + "Generated by: " + this.getClass().getSimpleName() + "\n"
        );
        JavaGen.emptyLines(sb, 2);
        sb.append("public class ").append(getImplName())
                .append(" extends BaseAriAction ")
                .append(" implements ")
                .append(getInterfaceName())
                .append(" {\n");
        Collections.sort(actions);
        for (Action a : actions) {
            for (Operation o : a.operations) {
                ji.removeSignature(o.getSignature());
            }
            sb.append(a.toString());
        }
        sb.append(ji.getCodeToImplementMissingSignatures());
        sb.append("}\n");
        return sb.toString();
    }

    public void registerInterfaces(JavaInterface j, String interfaceVersion) {
        for (Action a : actions) {
            a.registerInterfaces(j, interfaceVersion);
        }
    }

}
